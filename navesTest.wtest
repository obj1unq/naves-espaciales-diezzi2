import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}
}

describe "Mis tests" {
	test "Test 1" {
		const naveDeCarga = new NaveDeCarga(velocidad = 0)
		const naveDePasajeros = new NaveDePasajeros(velocidad = 290000)

		naveDeCarga.propulsar()

		assert.equals(20000, naveDeCarga.velocidad())

		naveDePasajeros.propulsar()
		
		assert.equals(300000, naveDePasajeros.velocidad())
  	}

    test "Test 2" {
		const naveDeCargaR = new NaveDeCargaRadiactiva(carga = 5000, estaSelladaAlVacio = true, velocidad = 10000)

		naveDeCargaR.recibirAmenaza()

		assert.equals(0, naveDeCargaR.velocidad())
		assert.equals(5000, naveDeCargaR.carga())
	}

	test "Test 3-1" {
		const naveDePasajeros = new NaveDePasajeros(velocidad = 290000)

		naveDePasajeros.prepararParaViajar()

		assert.equals(300000, naveDePasajeros.velocidad())
	}

	test "Test 3-2" {
		const naveDeCargaR = new NaveDeCargaRadiactiva(estaSelladaAlVacio = false, velocidad = 0)

		naveDeCargaR.prepararParaViajar()

		assert.equals(15000, naveDeCargaR.velocidad())
		assert.that(naveDeCargaR.estaSelladaAlVacio())
	}

	test "Test 3-3" {
		const naveDeCombate = new NaveDeCombate(modo = ataque, velocidad = 0)

		naveDeCombate.prepararParaViajar()

		assert.equals(15000, naveDeCombate.velocidad())
		assert.equals("Volviendo a la base", naveDeCombate.ultimoMensaje())
	}

	test "Test 3-4" {
		const naveDeCombate = new NaveDeCombate(modo = reposo, velocidad = 0)
		
		naveDeCombate.prepararParaViajar()

		assert.equals(15000, naveDeCombate.velocidad())
		assert.equals("Saliendo en misión", naveDeCombate.ultimoMensaje())
	}

	test "Test 4" {
		const naveDePasajeros = new NaveDePasajeros(velocidad = 0)

		naveDePasajeros.encontrarEnemigo()

		assert.equals(20000, naveDePasajeros.velocidad())
		assert.that(naveDePasajeros.alarma())
	}
}